Исходные данные для работы с Git в нашем проекте:

1. Сессия на GitHub:
Username: newveterinar
Пароль: cba6c5t4+3e=1v
E-mail: newveterinar@mail.ru
Токен (бессрочный): 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

2. Данные электронной почты:
Почта: newveterinar@mail.ru
Пароль: vet1c2a3+5b=6c

-------------------------

Подключение токена в студии для сессии "newveterinar"
(нужно для тестирования коммитов и пулл-реквестов,
а таже тем членам команды, кто будет отвечать за слияние результатов
с веткой мастер):
1. Зайти в "Settings".
2. Выбрать раздел "Version Control".
3. Выбрать пункт "GitHub".
4. Нажать справа на кнопку "+".
5. Выбрать пункт "Log in with Token...".
6. Вставить токен: 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
   Если он не сработает (то нужно обновить токена в сессии "newveterinar" на "github.com").
7. Нажать на кнопку "Add Account".
8. После этого, нужно будет кликнуть левой кнопкой мышки на один из аккаунтов
   и нажать на кнопку "V" справа для выбора для того, чтобы сделать его по-умолчанию ("Set as Default"),
   чтобы каждый раз не выбирать аккаунт.
ВАЖНО:
1. При работе по проекту каждый из нас будет работать в своей текущей сессии,
в этом случае в общей картине веток и коммитов будет понятно, кто что сделал.
Для объединения результатов, полученных на текущей ветке, с веткой мастером,
создаётся пулл-реквест и в теллеграмме в нашей группе "VeterinarGroup"
отправляется запрос на проверку данного пулл-реквеста и его мержа с веткой мастер.
Текущий ответственный человек в этот момент (начну я, когда буду не доступен,
то меня подменит кто-нибудь другой из нашей команды) заходит в сессию "newveterinar"
и от туда выполняет необходимые действия для объединения результатов.
2. Перед созданием пулл-реквеста, пожалуйста, проверяйте свою работу
на корректный запуск приложения, а также на выполнения приложением заложенных вами действий.

-------------------------

Создание проекта (важно для тестирования коммитов и пулл-реквестов,
а также для создания нашего проекта) выполняется в сессии "newveterinar":
1. Создаётся открытый проект.
2. В настройках "Settings" добавляются "Collaborators".
3. Для ветки master нужно создать правила:
	ставим галочки:
	1) Require a pull request before merging
           (необходимость создания пулл-реквестов)
		1.1) Require approvals
		     (необходимость подтверждений изменений)
		- Required number of approvals before merging: 1
		  (количество людей, необходимых для подтверждения изменений преед слиянием)
	2) Require conversation before merging
           (любые обсуждения должны быть закрыты)
	3) Reqire linear history
           (создание линейной истории)
	4) Require status check to pass before merging
           (осуществлять проверку перед тем, как коммит будет запушен в другую ветку)
           (дожидаться, пока коллаборанты не подтвердят свои действия)
	5) Нажать на кнопку "Create".
	После создания такого проавила только владелец может закоммитеть на ветке мастер изменения, а другие участники проекта не смогу это сделать.

-------------------------

Удаление ошибочно созданной ветки в локальном репозитории:
1. Переключаемся на ветку "master"
ВАЖНО:
Ветка должна находится не более, чем на один уровень ниже удаляемой ветки.
2. Переходим в раздел "Terminal".
3. Набираем команду:
git branch -d <ИМЯ ВЕТКИ>
Пример удаления ветки с имененем "proba":
git branch -d proba

ВАЖНО:
Находясь в сессии "newveterinar", не удалить ветку "master".

-------------------------

Удаление ошибочно созданной ветки в удалённом репозитории
осуществляется через сессию "newveterinar".

-------------------------

Создание ветки:
При создании ветки пишем название создаваемой сущности или пункта ТЗ.

-------------------------

При просмотре изменений нужно оставлять свои комментарии, а после этого нажать на кнопку "Review changes":
Для этого нужно нажать в нужной строке на знак "+" и добавить свой комментарий, нажав на кнопку "Start a review":
"Всё в порядке" или "Что-то нужно исправить" и т.п.
После этого нужно нажать на переключатель
"Comment" (для оставления комментария)
"Approve" (когда подтверждается правильность изменений)
"Request changes" (когда нужно изменить запрос)

После этого, автор запроса отвечает на каждый запрос, оставляя свой встречный комментарий:
Пишет в текстовом поле (где есть hint: "Reply..."), а потом нажимает на кнопку "Start a review".

После устранения замечаний опять делается коммит.
В названии такого коммита нужно переформулировать в утвердительной форме выполненное изменение.
Нажать на кнопку "Commit and push".

Есть два вида работ:
1. Каждый работает в своей ветке.
2. Каждый создаёт отдельную ветку для своей фичи и работает над ней.
3. Работаем в чужой ветке, чтобы подменить человека (человек ушёл в отпуск или ему нужно помочь).
Потом когда эту ветку принимаем, то эту ветку мерджим.

Для подтверждения изменений нужно нажать на кнопку "Resolve converstaion" при просмотре пулл-реквеста.

Для того, чтобы влить ветки в ветку мастер, сохранив предыдущие ветки нужно делать "Merge pull request".
Потом нажимать на кнопку "Confirm merge".
Чтобы влить другие ветки в ветку мастер, убрав вливаемые ветки, нужно делать "Squash and merge".
Потом нужно нажать на кнопку "Confirm squash and merge".
Потом нужно нажать на кнопку "Delete branch" (УДАЛЯТЬ СВОИ ВЕТКИ НЕ БУДЕМ).
В этом случае, будет ровная ветка мастер.
Если не нажимать кнопку "Delete branch", то от ровной ветки мастер будут идти отростки.

Для того, чтобы получить последнюю версию кода, нужно выделить последнюю точку на ветке мастер и нажать правую кнопку, в появившемся меню выбрать Branch/Master/Checkout.

Для того, чтобы в студии увидеть общий вид веток с коммитами нужно зайти
в закладку "9: Git",
далее, в закладку "Log",
далее, нажать на строчку "Local".
Чтобы увидеть коммиты на конкретной ветке, нужно кликнуть на её название.

Разница между командами pull и fetch:
При использовании pull, git сливает любые внесённые коммиты в ветку, в которой вы сейчас работаете. Команда pull автоматически сливает коммиты, не давая вам сначала просмотреть их. Если вы не пристально следите за ветками, выполнение этой команды может привести к частым конфликтам.
При использовании fetch, git собирает все коммиты из целевой ветки, которых нет в текущей ветке, и сохраняет их в локальном репозитории. Однако он не сливает их в текущую ветку. Это особенно полезно, если вам нужно постоянно обновлять свой репозиторий, но вы работаете над функциональностью, неправильная реализация которой может негативно сказаться на проекте в целом. Чтобы слить коммиты в основную ветвь, нужно использовать merge.
Т.е. git pull — это шоткод для последовательности двух команд: git fetch (получение изменений с сервера) и git merge (сливание в локальную копию).

--------------------------

Задачки для тестирования:
1. Создание проекта в сессии "newveterinar".
2. Создание пулл-реквестов.
3. Одобрение пулл-реквестов и слияние веток в ветку "master".
2. Разрешение конфликтов.
3. Загрузка данных с репозитория через команду pull.
4. Загрузка данных с репозитория через команду fetch.











